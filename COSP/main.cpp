#define _CRT_SECURE_NO_WARNINGS


#include <iostream>
#include <string>

#include "MPISort.h"
#include "BitonicMergesort.h"
#include "Hyperquicksort.h"

#define BITONIC_MERGE_SORT	"BMS"
#define HYPERQUICK_SORT		"HQS"


using namespace COSP;
using std::cout;
using std::cin;
using std::endl;

MPISort* GetAlgorithm(int argc,char *argv[]);

int main(int argc,char *argv[])
{
	int arr[] = {514, 357, 131, 733, 342, 388, 623, 646,  98, 348, 943, 246, 710, 826, 41, 18467, 6334, 26500, 19169, 15724, 11478, 29358, 26962, 24464, 108, 796, 557, 324, 605, 501, 165, 261, 193, 754, 210, 848, 544, 520, 973, 763, 874, 576, 701, 311, 197, 485, 219, 717, 738, 733, 653, 981, 883,  32, 187, 293,  73, 281, 216, 482, 729, 393,   8, 714,  40,  74, 974, 747, 235, 845, 335, 226, 160,  59, 360, 958, 823, 644, 927, 983,   7, 688, 315,  39, 204, 979, 139, 223, 344, 700, 564, 347, 217, 671, 484, 778,  17, 852, 190, 868, 920, 640, 282, 952, 686, 667, 905, 749, 170, 842, 294, 967, 899, 539, 840, 665, 145, 292, 155,  69, 950, 498, 129, 604,1000, 206, 146, 748, 328, 142, 354, 432, 956, 371, 556, 900, 637, 468, 459, 529, 237, 525, 976, 674, 543, 503, 376, 312,  61, 331, 135, 430, 395, 590,  66, 566, 537, 870, 369,  45, 608, 759, 114,  46, 374, 753, 691, 903,  76, 607, 518, 300, 912, 940, 268, 274,  54, 926, 584, 901,  77, 810, 679, 588, 102,  55, 521, 898, 391, 362,  27, 894, 448,   9, 297, 657, 618, 107, 567, 890, 623, 495, 793, 378,  11, 159, 489, 882, 614, 332, 787, 185,  41, 831, 692, 316, 992, 857,  75, 572, 964, 999, 166, 106, 510, 205, 944, 731, 104, 313,  87, 675, 562, 218, 930, 236, 136, 595, 436, 258, 307, 361, 348, 483, 400, 201, 843,  36, 363, 272, 128, 693, 321, 116, 904, 209, 739, 377, 112,  14,  12, 211, 536, 173, 239, 175, 790, 982, 799, 192, 728, 641, 677, 622, 487, 508, 847, 287, 587, 577, 137, 727, 742, 147,  22, 795, 355, 775, 414, 583, 177, 547, 632, 497, 490, 702, 533, 183, 610, 389, 552, 699, 285, 302, 851, 273, 995, 384, 499, 457, 267, 540, 893, 597, 746, 824, 804, 526, 806, 942, 922, 123,  51, 966, 440,  28,  58, 466, 426, 809, 259,  24, 214, 427, 864, 859, 385, 955, 965, 638, 409, 628, 296, 758, 596, 769, 767,  18, 180, 911, 816, 255, 212,  78, 379, 229,  33, 601, 474, 620, 184, 838, 230, 176, 855, 720, 548, 571, 553,   1, 428, 317,  21, 248, 698, 938, 390, 488, 712, 417, 115, 923, 658, 404, 862, 707, 555, 592, 916, 140, 751, 585, 288, 452, 325, 689, 768, 505, 744,  44, 433, 682, 110, 551,  95, 164, 134, 215, 789, 143, 491, 199, 919,  38, 410,  93, 784, 181, 151,  89, 480, 988, 948, 442, 619, 359, 372, 342, 631, 408, 984, 730, 200, 645, 168, 244, 959, 220, 737, 265, 805, 346, 803,  26, 224, 781, 481, 158, 500,  90, 169, 443, 812, 340, 396, 772, 299, 309, 832, 892, 664, 276, 755, 549, 554, 792, 771, 866, 502, 286, 858, 929, 998, 797, 808, 807, 574, 167, 867, 602, 277, 512, 636, 830, 902, 364, 685, 719, 878, 690, 366, 171, 626, 507, 741, 493, 243, 943, 684, 963, 673, 397, 368, 669, 506, 291, 609, 161, 380,  25,  88, 989, 252, 241,  20, 990, 407, 545, 517, 475, 221,  48, 478, 652, 509, 861, 424, 678, 119, 329, 418, 105, 304, 957, 833,   4,   2, 994, 774, 764, 382, 138, 365, 559, 945, 722, 416, 932, 642, 254, 231, 225, 470, 794, 635, 463, 743, 934, 306,  91, 589, 445, 118,  94, 871, 613, 896, 511, 327, 801, 993, 203,  83, 156, 439, 846, 373, 773, 997, 228, 627, 881, 527,  42, 735, 570, 785, 908,  67, 429, 895, 826, 827,  84, 687, 126, 275, 757, 680, 704, 606, 298, 420, 756,  57, 435, 711, 918, 681, 836, 885, 425,  79,  47, 616, 127, 245, 541, 387,   6, 319, 242, 561, 888, 152, 314, 889, 471, 834, 800, 972, 345, 458, 246,  29, 247, 761, 446, 718, 777,  60, 709, 461, 406, 542, 534, 798,  15, 469, 132, 646, 736, 611, 752, 978, 109, 308, 238, 835, 196, 479, 779, 791, 568, 696, 266, 594, 227, 447, 877, 615, 279, 960, 884, 388, 514, 322, 194, 915, 419, 295, 825, 305, 580, 450, 260, 357, 333, 560, 970, 876, 422, 872, 256,  35, 925, 141, 386, 841, 334, 411, 290, 844, 716, 326, 829,  34,  85, 725,  71, 186, 270, 437,  64, 907, 865, 569, 863, 523, 174, 949, 706, 579, 103,  96, 937, 591, 352, 403, 985, 822, 234, 532, 149, 666, 968, 431, 163, 647, 961, 839, 444,  80, 996, 370, 659, 303, 600, 578, 111, 740, 121, 651, 639, 818, 232, 853, 144, 289, 405, 676, 897, 131,  16, 939, 633, 683, 351, 954, 819, 776, 565, 649, 398, 318,   5, 531, 392,  53, 283,  98, 150, 694, 189, 603, 750, 593, 213, 264, 909, 582, 208, 153,  50, 157,  37, 516,  49,  81, 880,  56, 828,  52, 663, 454, 726, 708, 869, 100, 375, 875, 460, 760, 120, 284, 253, 337, 381, 655, 643, 473,  72, 563, 353, 670, 762, 530, 172, 535, 621, 910, 703, 928,  43, 336, 412, 133,  97, 496, 586, 519, 891, 124, 451, 101, 854, 198, 953, 130, 780, 695, 921, 148, 415, 356, 721, 122, 941,  86, 263,  63, 191, 449,  30, 575, 367, 465, 423,  82, 924, 251, 188, 467, 178, 441, 558, 634, 598, 125, 817, 338, 434, 202, 668, 660, 813, 987, 339, 301, 413, 715,  19, 250, 962, 401, 117, 951, 207, 821, 455, 504, 860, 820,  13, 271, 783, 849, 734, 599, 323, 969, 786, 538, 629, 723, 162, 581, 931, 269, 917, 732, 513, 383, 980, 399, 662, 494, 782, 350, 977,  31, 650, 913, 358, 914, 672,   3, 476, 770, 492, 906, 522, 195, 341,  65, 887, 394, 936, 233, 617, 766, 886, 453, 343, 873, 811, 528,  92, 349, 802, 624, 630,  99, 697, 249,  23, 710, 113, 850, 573, 280, 438, 262, 625, 257, 402, 612, 179, 815, 856, 975, 705, 765, 550, 935, 661, 947,  70, 654, 462, 240, 486, 991, 515, 182, 656, 837, 278, 788, 724, 464, 456, 524, 745, 222, 879, 330, 814, 546, 986,  68, 310, 971, 713, 421, 477, 648, 154, 472, 946, 320, 933,  62,  10};
	MPISort* sortAlg = nullptr;
	try{
		sortAlg = GetAlgorithm(argc,argv);
		sortAlg->Sort(arr);

	} catch(std::exception& e) {
		std::cout << "EXCEPTION:\t" << e.what() << std::endl;
	}

	if(sortAlg != nullptr)
		delete sortAlg;

	return EXIT_SUCCESS;
}

MPISort* GetAlgorithm(int argc, char *argv[]){	
	std::string alg("");
	if(argc >= 2) alg = argv[1];
	
	if(alg == BITONIC_MERGE_SORT){
		return new BitonicMergesort(argc,argv);
	}
	if(alg == HYPERQUICK_SORT){
		return new Hyperquicksort(argc,argv);
	}

	return new BitonicMergesort(argc,argv);;
}